/*
Given a string s, return the number of unique palindromes of length three that are a subsequence of s.

Note that even if there are multiple ways to obtain the same subsequence, it is still only counted once.

A palindrome is a string that reads the same forwards and backwards.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
 

Example 1:

Input: s = "aabca"
Output: 3
Explanation: The 3 palindromic subsequences of length 3 are:
- "aba" (subsequence of "aabca")
- "aaa" (subsequence of "aabca")
- "aca" (subsequence of "aabca")
*/

//approch 1
class Solution {
public:
    int countPalindromicSubsequence(string s) {
        int len = s.length();

        unordered_set<char> letters;
        for(int i = 0 ; i < len ; i++ ){
            letters.insert(s[i]);            
        }
        
        int result = 0;
        for(auto letter : letters){
            int left_idx  = -1;
            int right_idx = -1;

            for(int i = 0 ; i < len ; i++){
                if(s[i] == letter){
                    if(left_idx == -1){
                    left_idx = i;                    
                }

                    right_idx = i ;
                }
            }

            unordered_set<char> midLetters;
            for(int mid = left_idx+1 ; mid <= right_idx-1 ; mid++){
                midLetters.insert(s[mid]);
            }

            result += midLetters.size();

        }
        return result;
        
    }
};
//TC = O(26*N) = O(N);
//SC = O(26) = O(1);


//approch 2:
class Solution {
public:
    int countPalindromicSubsequence(string s) {
        int len = s.length();

        vector<pair<int,int>> indices(26,{-1,-1});

        for(int i = 0 ; i < len; i++){
            char ch = s[i];
            int idx = ch - 'a';

            if(indices[idx].first == -1){
                indices[idx].first = i;                
            }

            indices[idx].second = i;
        }
        
        int result = 0;
        for(int i = 0 ; i < 26 ; i++){
            int left_idx  = indices[i].first;
            int right_idx = indices[i].second;

            if(indices[i].first == -1 || right_idx - left_idx < 2){
                continue;
            }

            unordered_set<char> midLetters;
            for(int mid = left_idx+1 ; mid < right_idx ; mid++){
                midLetters.insert(s[mid]);
            }

            result += midLetters.size();

        }
        return result;
        
    }
};
