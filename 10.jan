/*
You are given two string arrays words1 and words2.

A string b is a subset of string a if every letter in b occurs in a including multiplicity.

For example, "wrr" is a subset of "warrior" but is not a subset of "world".
A string a from words1 is universal if for every string b in words2, b is a subset of a.

Return an array of all the universal strings in words1. You may return the answer in any order.

 

Example 1:

Input: words1 = ["amazon","apple","facebook","google","leetcode"], words2 = ["e","o"]
Output: ["facebook","google","leetcode"]
*/

//approch
class Solution {
private:
    bool isSubset(vector<int>& freq2, vector<int>& temp) {
        for (int i = 0; i < 26; ++i) {
            if (freq2[i] > temp[i]) {
                return false;
            }
        }
        return true;
    }

public:
    vector<string> wordSubsets(vector<string>& words1, vector<string>& words2) {
        vector<int> freq2(26, 0);
        vector<string> result;

        for (string& word : words2) {
            vector<int> temp(26, 0);
            for (char ch : word) {
                temp[ch - 'a']++;
            }
            for (int i = 0; i < 26; ++i) {
                freq2[i] = max(freq2[i], temp[i]);
            }
        }

        for (string& word : words1) {
            vector<int> temp(26, 0);
            for (char ch : word) {
                temp[ch - 'a']++;
            }

            if (isSubset(freq2, temp)) {
                result.push_back(word);
            }
        }

        return result;
    }
};    